There are three simple ways to iterate TreeMap in reverse order in Java:
ðŸ“Œ Using the reverseOrder() method
ðŸ“Œ Using the descendingKeySet() method
ðŸ“Œ Using the descendingMap() method

ðŸ“Œ Solution:
package CodingChallengeOf100Days;

import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;

public class TreeMapReverse {
 public static void reverseUsingRevOrder() {
 TreeMap<Integer, String> map=new TreeMap<>(Collections.reverseOrder());
 map.put(3, "Bananas");
 map.put(1, "Apples");
 map.put(10, "Watermelon");
 map.put(7, "Grapes");
 map.put(6, "Mango");
 System.out.println(map);
 System.out.println("----------------------");
 }
 public static void reverseUsingDescendingKeySet() {
 TreeMap<Integer, String> map=new TreeMap<>();
 map.put(3, "Bananas");
 map.put(1, "Apples");
 map.put(10, "Watermelon");
 map.put(7, "Grapes");
 map.put(6, "Mango");
 System.out.println("Using descendingKeySet() method");
 System.out.println("Original map " +map);
 Set<Integer> set=map.descendingKeySet();
 System.out.println("After reverse: ");
 for (Integer key : set) {
 System.out.println(key+ " "+map.get(key));
 }
 System.out.println("----------------------");
 }
 public static void reverseUsingDescendingMap() {
 TreeMap<Integer, String> map=new TreeMap<>();
 map.put(3, "Bananas");
 map.put(1, "Apples");
 map.put(10, "Watermelon");
 map.put(7, "Grapes");
 map.put(6, "Mango");
 System.out.println("Using descendingMap() method");
 System.out.println("Original map " +map);
 Map<Integer, String> revMap=map.descendingMap();
 System.out.println("After reverse: "+revMap);

 }
 public static void main(String[] args) {
 reverseUsingRevOrder();
 reverseUsingDescendingKeySet();
 reverseUsingDescendingMap();
 }
}